Here’s a comprehensive list of 50 questions for each section, tailored to your skillset as a frontend developer with 3 years of experience. These will help you prepare thoroughly for interviews:

---

### **1. HTML/CSS/JavaScript Questions**

**HTML:**

1. What is the difference between `<div>` and `<span>` in HTML?
2. What are semantic HTML elements? Can you give some examples?
3. How do you create a table in HTML? What are the attributes for tables?
4. What is the purpose of the `<head>` element in an HTML document?
5. How do you include external CSS files in HTML?
6. What is the role of the `<meta>` tag in HTML?
7. Explain the difference between block-level elements and inline elements.
8. What is the purpose of the `<link>` tag in HTML?
9. How do you create an unordered list in HTML?
10. What is the purpose of the `<iframe>` element?
11. Explain the difference between `<input>` types like text, password, email, etc.
12. What is the use of the `alt` attribute in `<img>` tags?
13. What is the difference between the `target="_blank"` and `target="_self"` in anchor tags?
14. Explain the concept of form validation in HTML.
15. What is the difference between the `<section>` and `<article>` elements in HTML?
16. How do you include JavaScript in an HTML page?
17. What is the purpose of the `<canvas>` element?
18. How can you create a dropdown list in HTML?
19. What are data attributes in HTML?
20. What are the different ways to link external resources (like fonts, scripts, etc.) in an HTML document?
21. How can you make a webpage accessible to users with disabilities?
22. What is the difference between `<strong>` and `<b>` tags?
23. What are the benefits of using the `<footer>` tag in HTML?
24. What does the `href` attribute in the `<a>` tag do?
25. What is the difference between `<em>` and `<i>` tags in HTML?
26. How do you add a tooltip in HTML?
27. What is the purpose of the `<noscript>` tag?
28. How would you embed a video in HTML?
29. How can you set default values in an HTML form?
30. What are the benefits of using the `<header>` tag in HTML?
31. What is a `<meta>` tag for viewport?
32. How do you use the `autofocus` attribute in a form element?
33. How can you load external resources asynchronously in HTML?
34. What is the difference between `<link>` and `<script>` tags?
35. How can you optimize the performance of an HTML page?
36. How do you add custom fonts to your website?
37. What is the role of `rel="stylesheet"` in the `<link>` tag?
38. How can you define the character set for an HTML document?
39. How do you disable an input field in HTML?
40. How do you add a favicon to a website?
41. What are the `<noscript>` and `<object>` tags used for in HTML?
42. How do you implement an anchor link to navigate within a page?
43. What are the advantages of using HTML5 over older HTML versions?
44. What are the common accessibility issues with HTML elements?
45. What is the `lang` attribute used for in HTML?
46. What are `<figure>` and `<figcaption>` elements used for in HTML?
47. How do you set an HTML form to submit data to a server?
48. How do you prevent form submission in HTML?
49. How do you use the `accept` attribute in file input fields?
50. What is the `autocomplete` attribute in HTML forms?

**CSS:**

1. What is the box model in CSS?
2. What are the different ways to apply CSS to a webpage?
3. What is the difference between `margin` and `padding`?
4. How do you center a block element horizontally and vertically in CSS?
5. What is the difference between `absolute`, `relative`, and `fixed` positioning in CSS?
6. What is the `z-index` in CSS, and how does it work?
7. How does CSS inheritance work?
8. What is the purpose of the `float` property in CSS?
9. What is the `clear` property in CSS?
10. What is the difference between `inline`, `block`, and `inline-block` in CSS?
11. What are pseudo-classes and pseudo-elements in CSS?
12. How would you create a responsive layout using CSS?
13. What are media queries, and how are they used in CSS?
14. What are `rem` and `em` units in CSS, and how do they differ from `px`?
15. What is the difference between `visibility: hidden` and `display: none` in CSS?
16. What is Flexbox, and how is it used for layout management?
17. What are the benefits of CSS Grid?
18. What is a `@media` query, and how do you use it?
19. How do you add a transition effect in CSS?
20. What is the `position: sticky` property used for?
21. How do you create a responsive navigation menu using CSS?
22. What is the `opacity` property in CSS, and how does it work?
23. How do you implement a simple CSS animation?
24. What is the `transform` property in CSS, and how is it used?
25. What is the difference between `box-sizing: content-box` and `box-sizing: border-box`?
26. How can you create a fixed footer using CSS?
27. How do you change the font of an element using CSS?
28. What are CSS transitions and animations? How do they differ?
29. What are CSS variables, and how do you use them?
30. What is the purpose of `text-align` and `vertical-align` properties in CSS?
31. How do you add a shadow effect to a box or text in CSS?
32. How do you create a gradient in CSS?
33. What is the purpose of the `opacity` property in CSS?
34. How do you handle cross-browser compatibility issues in CSS?
35. What are vendor prefixes in CSS? Can you give an example of when they are used?
36. What is a CSS preprocessor? Have you worked with SASS or LESS?
37. How do you create a responsive design using CSS Grid?
38. How do you create a multi-column layout in CSS?
39. What are the different display property values in CSS?
40. How would you implement a CSS loader or spinner?
41. What is `@keyframes` in CSS animations?
42. How do you use the `flex-direction` property in Flexbox?
43. What is the `align-items` and `justify-content` properties used for in Flexbox?
44. How do you create a sticky header using CSS?
45. What are some ways to optimize CSS for performance?
46. How do you hide an element in CSS but still leave space for it?
47. How do you add custom animations to buttons or other elements?
48. What is the difference between `position: absolute` and `position: relative`?
49. How do you apply CSS rules to specific elements dynamically (using pseudo-classes)?
50. How do you implement a CSS grid system?

---

I'll break the remaining questions (for JS, React, TypeScript, etc.) into separate responses to keep things organized. Stay tuned!

### **2. JavaScript Questions**

1. What is the difference between `var`, `let`, and `const` in JavaScript?
2. Explain the concept of hoisting in JavaScript.
3. What is the `this` keyword in JavaScript? How does it behave in different contexts?
4. How do you define and invoke a function in JavaScript?
5. What are closures in JavaScript? Can you provide an example?
6. What is the difference between `null` and `undefined`?
7. How does the JavaScript event loop work?
8. What are promises in JavaScript? How do they differ from callbacks?
9. What is the purpose of the `async` and `await` keywords in JavaScript?
10. Can you explain what a JavaScript `callback` is and give an example?
11. What is the difference between `==` and `===` in JavaScript?
12. How would you handle errors in JavaScript? What is the role of `try`, `catch`, and `finally` blocks?
13. What are JavaScript higher-order functions? Can you give an example?
14. What is event delegation in JavaScript, and why is it useful?
15. What are arrow functions, and how do they differ from regular functions?
16. Can you explain the concept of `bind`, `call`, and `apply` in JavaScript?
17. What are `setTimeout` and `setInterval`? How do they work?
18. What are template literals, and how are they different from regular strings?
19. What is destructuring in JavaScript? Can you provide examples of object and array destructuring?
20. What is the purpose of the `spread` operator in JavaScript? How is it different from `rest`?
21. How does the `map()` function work in JavaScript? Provide an example of its usage.
22. How does the `filter()` function work in JavaScript? Can you provide an example?
23. What is the `reduce()` function, and how is it used in JavaScript?
24. What is the difference between synchronous and asynchronous programming in JavaScript?
25. Can you explain the concept of promises chaining?
26. How would you convert a string to a number in JavaScript?
27. What is the difference between a shallow copy and a deep copy in JavaScript?
28. Can you explain how JavaScript’s `bind` method works and provide an example?
29. What are JavaScript modules, and how do you use them?
30. What is the event bubbling and event capturing model in JavaScript?
31. How do you prevent event propagation in JavaScript?
32. What is the purpose of `localStorage` and `sessionStorage` in JavaScript? What are the differences between them?
33. Can you explain how JavaScript’s `fetch` API works? How is it different from `XMLHttpRequest`?
34. What is a JavaScript prototype chain?
35. How would you implement deep cloning of an object in JavaScript?
36. What are the various types of operators in JavaScript? Can you explain them?
37. What are the performance implications of using `setTimeout` and `setInterval`?
38. What is an IIFE (Immediately Invoked Function Expression)? Can you provide an example?
39. How do you check if a variable is an array in JavaScript?
40. What is the `instanceof` operator in JavaScript?
41. How would you compare two objects for equality in JavaScript?
42. What is the difference between a `for...in` loop and a `for...of` loop in JavaScript?
43. What is the purpose of `JSON.parse()` and `JSON.stringify()`?
44. How would you implement deep equality comparison for objects in JavaScript?
45. What are `Set` and `Map` in JavaScript, and how do they differ from arrays and objects?
46. How would you check if a number is an integer in JavaScript?
47. What is a singleton pattern in JavaScript?
48. What is the purpose of the `Object.freeze()` method in JavaScript?
49. How do you handle circular references in JavaScript when stringifying an object?
50. How do you implement a debounce function in JavaScript?

---

### **3. React.js Questions**

1. What are the differences between functional and class components in React?
2. What is JSX, and how is it different from HTML?
3. How does React's virtual DOM work, and why is it important for performance?
4. Can you explain the purpose of `useState` and `useEffect` hooks in React?
5. How do you optimize performance in React applications?
6. What is the role of the `key` prop in React lists?
7. What are controlled and uncontrolled components in React? Give examples.
8. What is the difference between state and props in React?
9. How do you pass data from a parent component to a child component in React?
10. What is the purpose of the `context` API in React?
11. How do you manage state in a React application? Can you explain how `useReducer` works?
12. What are React's lifecycle methods, and when are they invoked?
13. How do you handle forms in React? What are controlled components in forms?
14. What is the role of the `shouldComponentUpdate` lifecycle method in class components?
15. How do you handle errors in React components? What is error boundary?
16. How do you implement conditional rendering in React?
17. What is React Router, and how do you use it for navigation?
18. How do you handle side effects in React using `useEffect`?
19. Can you explain React Hooks in general? How are they different from lifecycle methods?
20. What is React's `Suspense` and `lazy`? How do they help with code splitting?
21. What is prop drilling in React, and how can you avoid it?
22. What are higher-order components (HOCs) in React? Can you provide an example?
23. What is the purpose of `React.memo` in React?
24. What is the difference between `useEffect` and `componentDidMount`?
25. What is the `useContext` hook in React, and when would you use it?
26. How does React handle events and event binding?
27. What is the difference between `state` and `context` in React?
28. Can you explain the concept of `lifting state up` in React?
29. What are the advantages of using `useCallback` and `useMemo` hooks?
30. How do you handle dynamic imports in React?
31. What is the difference between controlled and uncontrolled components in React?
32. Can you explain how React reconciles the virtual DOM and real DOM?
33. What are compound components in React?
34. How do you use `useReducer` in a React application? What are the use cases?
35. What is the `React.Fragment` component used for in React?
36. How would you implement lazy loading of images or components in React?
37. What are some of the new features in React 18 (Concurrent Mode, Suspense, etc.)?
38. What is the difference between `React.PureComponent` and `React.Component`?
39. How do you handle form validation in React?
40. Can you explain the concept of `render props` in React?
41. How would you handle testing React components? What tools would you use?
42. What is the purpose of `dangerouslySetInnerHTML` in React?
43. What are the differences between `useEffect` and `useLayoutEffect`?
44. How do you create and manage a custom hook in React?
45. What is the `useRef` hook in React, and when would you use it?
46. How does React handle updates to the component state and re-rendering?
47. How do you prevent unnecessary re-renders in React?
48. What is the `useImperativeHandle` hook used for in React?
49. Can you explain how Redux works with React for state management?
50. What are React portals, and how do they work?

---

### **4. TypeScript Questions**

1. What is the purpose of TypeScript, and how does it enhance JavaScript?
2. Can you explain the difference between `any`, `unknown`, and `never` types in TypeScript?
3. What are interfaces in TypeScript, and how do they differ from types?
4. How do you define a function signature in TypeScript?
5. What is a tuple in TypeScript, and how is it different from an array?
6. What is the `readonly` modifier in TypeScript? Can you provide an example?
7. What is type inference in TypeScript, and how does it work?
8. How do you define optional properties in TypeScript interfaces?
9. What are generics in TypeScript, and how are they used?
10. What is the difference between `type` and `interface` in TypeScript?
11. How would you define a class in TypeScript?
12. What are decorators in TypeScript, and how are they used?
13. Can you explain how TypeScript handles modules?
14. How do you handle union and intersection types in TypeScript?
15. What is the difference between `void` and `never` in TypeScript?
16. How do you handle type checking for function arguments in TypeScript?
17. What is the purpose of the `as` keyword in TypeScript?
18. Can you explain how type assertion works in TypeScript?
19. How do you use the `Record` utility type in TypeScript?
20. How do you handle default parameters in TypeScript functions?
21. What is a `Promise` in TypeScript, and how would you type it?
22. How do you handle `null` and `undefined` in TypeScript?
23. What is the role of `enum` in TypeScript?
24. How does TypeScript help with working with external JavaScript libraries?
25. How would you write an asynchronous function in TypeScript with proper types?
26. What are type guards in TypeScript? Can you give an example?
27. How does TypeScript handle type narrowing?
28. How would you define a function that takes a variable number of arguments in TypeScript?
29. What are the benefits of using `strict` mode in TypeScript?
30. Can you explain how TypeScript handles type compatibility and subtyping?
31. What is `interface` inheritance in TypeScript, and how does it work?
32. How would you handle default values for optional properties in TypeScript?
33. How do you use TypeScript with React components?
34. What is the `keyof` operator in TypeScript, and how is it used?
35. How does TypeScript handle the concept of generics in functions?
36. What is the difference between `const` assertions and regular variable declarations in TypeScript?
37. How do you use `type` aliases to define complex types in TypeScript?
38. What is the difference between `Function` and `() => void` types in TypeScript?
39. What is the role of the `extends` keyword in TypeScript generics?
40. How do you define a type for an object with dynamic keys in TypeScript?
41. What is the role of `this` in TypeScript and how do you type it?
42. How do you implement type-safe event handling in TypeScript?
43. What are intersection types in TypeScript, and when would you use them?
44. How do you work with third-party libraries in TypeScript?
45. What is the`unknown` type in TypeScript, and when would you use it?
46. 
46. What is type narrowing in TypeScript? How does TypeScript determine types dynamically?
47. What is the significance of the `never` type in TypeScript, and when should you use it?
48. How do you deal with promise resolution types in TypeScript?
49. How do you ensure type safety when working with `this` in TypeScript?
50. Can you explain how `TypeScript` interfaces are used in React with hooks?

---

These questions cover a wide range of technical concepts and best practices for frontend development with React, TypeScript, JavaScript, and CSS. They will help you solidify your expertise and prepare for both technical and system design interviews.

### **5. Redux Questions**

1. What is Redux, and why is it used in React applications?
2. Can you explain the core principles of Redux?
3. What are the three main principles of Redux?
4. What is the role of the store in Redux, and how is it created?
5. What is the difference between state and props in Redux?
6. What is the purpose of an action in Redux?
7. What is an action creator in Redux?
8. What is the difference between synchronous and asynchronous actions in Redux?
9. How does Redux middleware work? Can you name a few commonly used Redux middlewares?
10. What is `dispatch` in Redux, and how does it work?
11. What is the role of a reducer in Redux?
12. Can you explain how a reducer works and how it handles state changes?
13. What is the purpose of the `combineReducers` function in Redux?
14. What is the significance of the `initialState` in Redux reducers?
15. What is the role of the `store.subscribe()` method in Redux?
16. Can you explain the concept of the Redux DevTools extension?
17. How do you handle multiple actions in a single reducer in Redux?
18. What are pure functions in Redux, and why are reducers required to be pure?
19. Can you explain the difference between `mapStateToProps` and `mapDispatchToProps` in Redux and how they are used with `connect()`?
20. How does `connect()` work in Redux to connect a component to the Redux store?
21. What are thunk and saga in Redux, and how are they used for handling asynchronous actions?
22. Can you explain the purpose of `redux-thunk` middleware and how it is used?
23. What is a `redux-saga`, and how is it different from `redux-thunk`?
24. How do you handle side effects in Redux (e.g., API calls)?
25. What is the `Provider` component in Redux, and how does it work with the store?
26. How do you manage asynchronous actions in Redux?
27. What is the purpose of the `reducer` in Redux, and why should it not have side effects?
28. How would you handle nested state in Redux?
29. Can you explain the concept of `immutable` state in Redux? Why is immutability important?
30. What is Redux Toolkit, and why should you use it instead of vanilla Redux?
31. What is `createSlice` in Redux Toolkit, and how does it simplify the Redux setup?
32. How does Redux handle state updates in an immutable manner?
33. Can you explain the concept of `action creators` in Redux and give an example?
34. How do you dispatch an action from a component in Redux?
35. What is the difference between `dispatch` and `getState()` in Redux?
36. How do you structure actions in Redux? Can you provide an example of a typical action object?
37. Can you explain the difference between `payload` and `type` in a Redux action?
38. How do you handle form submission and validation using Redux?
39. What is the `createAsyncThunk` method in Redux Toolkit, and how does it simplify async actions?
40. What is the `createReducer` function in Redux Toolkit, and how does it differ from traditional reducers?
41. What are selectors in Redux, and how do they help in accessing state?
42. How would you implement pagination or filtering in a Redux state management setup?
43. How would you structure the state in a Redux store for large applications?
44. Can you explain the concept of the “Redux pattern” and how it fits into a large-scale React application?
45. What are the challenges with using Redux in large applications, and how can they be mitigated?
46. How do you use Redux in combination with React Router for routing?
47. Can you explain the concept of normalizing state in Redux? Why is it important?
48. How do you reset the Redux store to its initial state?
49. How does Redux handle complex state transformations and maintainable architecture?
50. What is the purpose of `immer` in Redux, and how does it simplify handling immutable data?

---

These questions cover a broad spectrum of topics related to Redux, from basic concepts to advanced techniques and best practices. Being prepared for these questions will help you understand Redux thoroughly and answer confidently in interviews.

### **6. Ant Design Questions**

1. What is Ant Design, and what are its main features?
2. Can you explain the basic layout system of Ant Design?
3. How do you create a responsive layout in Ant Design using its grid system?
4. What is the `Col` and `Row` component in Ant Design, and how do they work together?
5. What are Ant Design's design principles and how do they influence UI/UX design?
6. How do you customize the theme in Ant Design? Can you provide an example of custom styling?
7. Can you explain the purpose of the `ConfigProvider` component in Ant Design?
8. How do you handle localization and internationalization in Ant Design?
9. What are Ant Design’s form components? Can you explain how to use them?
10. How do you use the `Form` component in Ant Design for controlled forms?
11. What is the difference between `Form.Item` and `Input` in Ant Design?
12. How do you perform form validation in Ant Design?
13. Can you explain the use of `validateFields` and `validateFieldsAndScroll` in Ant Design forms?
14. What are Ant Design’s notification and message components, and how would you use them?
15. Can you explain how to implement modal dialogs using Ant Design’s `Modal` component?
16. How do you handle button clicks and events in Ant Design?
17. Can you explain how Ant Design’s `Table` component works, and how do you make it dynamic?
18. How do you implement pagination and sorting in Ant Design’s `Table` component?
19. What is the purpose of Ant Design’s `Spin` component, and how do you use it?
20. Can you explain how the `DatePicker`, `RangePicker`, and `TimePicker` components work in Ant Design?
21. How do you style Ant Design components with custom themes and custom CSS?
22. What are Ant Design’s input components (`Input`, `InputNumber`, `TextArea`, etc.), and when do you use each one?
23. Can you explain how `Select`, `AutoComplete`, and `Cascader` components are used in Ant Design?
24. How do you implement drag-and-drop functionality in Ant Design using `Transfer` and `Tree` components?
25. What is the difference between the `Menu` and `Tabs` components in Ant Design? How would you use each in a project?
26. How do you create a responsive navigation bar using Ant Design’s `Menu` component?
27. Can you explain how Ant Design’s `Card` component is used for displaying content in a well-organized layout?
28. What is the role of `Divider` in Ant Design, and when should it be used in a layout?
29. Can you explain how Ant Design’s `Breadcrumb` component works and when it should be used?
30. How do you use `Radio`, `Checkbox`, and `Switch` components in Ant Design to handle user input?
31. How do you use Ant Design’s `Carousel` component to create image or content sliders?
32. What is the purpose of the `Tag` component in Ant Design, and how do you implement it in a project?
33. Can you explain the usage of Ant Design’s `Avatar` component for displaying user profile images?
34. How do you implement Ant Design’s `Tooltip` and `Popover` components in a project?
35. What is the purpose of Ant Design’s `Drawer` component, and how do you use it?
36. How can you customize Ant Design’s components using the `style` prop or CSS classnames?
37. How do you manage the state of Ant Design’s components like `Tabs`, `Menu`, and `Accordion`?
38. How do you implement form fields with dependent fields in Ant Design? For example, select a country and display dependent states.
39. What is the `Affix` component in Ant Design, and how is it used to fix elements to the viewport during scroll?
40. How do you handle asynchronous data in Ant Design’s `Table` component?
41. Can you explain how Ant Design’s `Pagination` component works and how you would integrate it into a page?
42. How would you implement an Ant Design `Modal` with forms and validation?
43. What are Ant Design's `Icon` components, and how do you use them in your application?
44. How do you manage Ant Design components' state for controlled and uncontrolled inputs?
45. Can you explain how to handle dynamic changes in Ant Design’s form fields and component states?
46. What is the role of `Popover` and `Tooltip` components in Ant Design, and when should each be used?
47. How do you integrate Ant Design’s `Steps` component into a wizard-style form or workflow?
48. What are Ant Design’s `Progress` and `Alert` components, and how are they typically used in a UI?
49. How do you handle custom validations and error messages in Ant Design forms?
50. Can you explain how to integrate Ant Design with `React Router` for managing routes and active navigation states?

---

These questions cover the key features and components of Ant Design that you would likely encounter in real-world projects. Mastering these topics will help you work efficiently with Ant Design in React applications and allow you to deliver polished user interfaces.

### **7. Vue.js Questions**

1. What is Vue.js, and what are its key features?
2. Can you explain the Vue instance and how it’s created?
3. What are Vue components, and how do you create and use them?
4. What is the difference between `v-bind` and `v-model` in Vue.js?
5. Can you explain the concept of two-way data binding in Vue.js?
6. How do you handle events in Vue.js using `v-on`?
7. What are computed properties in Vue.js, and how do they differ from methods?
8. Can you explain the use of `watchers` in Vue.js and give an example of their usage?
9. What is Vue Router, and how do you use it to manage navigation in a Vue.js app?
10. How do you pass props from a parent to a child component in Vue.js?
11. What is the Vue lifecycle, and what are the common lifecycle hooks used in Vue.js?
12. Can you explain the concept of `mixins` in Vue.js and provide an example of their use?
13. How do you manage state in Vue.js? What is Vuex, and how is it used?
14. What are directives in Vue.js? Can you explain the commonly used ones like `v-if`, `v-for`, and `v-show`?
15. What is the purpose of `v-bind` in Vue.js, and how does it work with dynamic attributes?
16. How does Vue.js handle event modifiers, such as `@click.stop` or `@keyup.enter`?
17. What is the difference between `v-if` and `v-show` in Vue.js?
18. How do you manage dynamic class binding in Vue.js?
19. What is the role of `slot` in Vue.js, and how does it allow for component composition?
20. Can you explain the `scoped` attribute in Vue.js and how it is used for styling?
21. What is the Vue.js `render` function, and how do you use it to create components programmatically?
22. How does Vue.js support custom directives, and when should you create them?
23. Can you explain the difference between Vue’s `data` and `computed` properties?
24. How do you use Vue.js with Axios for making HTTP requests?
25. What are filters in Vue.js, and how do you use them for formatting data?
26. Can you explain the concept of `refs` in Vue.js and how they are used to access DOM elements?
27. What is the purpose of the `provide` and `inject` API in Vue.js, and when should they be used?
28. How do you use dynamic components in Vue.js?
29. What is Vue CLI, and how do you set up a Vue project using Vue CLI?
30. Can you explain how to handle form validation in Vue.js?
31. How do you handle asynchronous actions in Vuex?
32. What are Vue.js `renderless` components, and how are they used?
33. How do you handle error boundaries or error handling in Vue.js components?
34. What is the difference between `Vue.observable` and `Vuex` for state management?
35. How do you optimize performance in large Vue.js applications?
36. Can you explain the role of `async` and `await` in Vue.js when handling async code?
37. What is the purpose of `Vue.extend` in Vue.js, and how is it used to create components?
38. How do you use the `v-for` directive to render lists in Vue.js?
39. What are the different ways to use conditional rendering in Vue.js?
40. Can you explain the purpose of the `key` attribute when using `v-for` in Vue.js?
41. How do you handle and emit custom events in Vue.js components?
42. What are some common performance optimization techniques you use in Vue.js?
43. How does Vue.js handle reactivity under the hood? Can you explain the reactivity system?
44. What is the `computed` cache in Vue.js, and how does it help improve performance?
45. How does Vue.js handle async components and lazy loading?
46. How would you structure a large-scale Vue.js application?
47. What are single-file components in Vue.js, and how are they structured?
48. Can you explain the concept of `mixins` in Vue.js and how they affect component logic?
49. How do you handle routing parameters in Vue.js using Vue Router?
50. What are dynamic imports in Vue.js, and how are they useful for lazy loading?

---

### **8. Angular Questions**

1. What is Angular, and what are its key features?
2. Can you explain the difference between Angular and React/Vue in terms of architecture?
3. What are components in Angular, and how do you define and use them?
4. Can you explain the role of decorators in Angular, such as `@Component`, `@Injectable`, and `@NgModule`?
5. How do you create services in Angular, and what is dependency injection?
6. What is Angular CLI, and how does it help in developing Angular applications?
7. What is the purpose of modules in Angular, and how are they structured?
8. Can you explain Angular's two-way data binding and how it differs from one-way data binding?
9. What are directives in Angular, and what are the different types of directives (structural and attribute)?
10. How do you use `ngIf`, `ngFor`, and other structural directives in Angular?
11. How does Angular handle forms, and what is the difference between template-driven and reactive forms?
12. Can you explain the concept of `ngModel` and how two-way data binding works in Angular?
13. How do you handle form validation in Angular, both for template-driven and reactive forms?
14. What is the role of the `@Input()` and `@Output()` decorators in Angular components?
15. Can you explain how to manage state and data flow in Angular using services?
16. How does Angular handle lifecycle hooks, and what are the most commonly used hooks like `ngOnInit`, `ngOnChanges`, and `ngOnDestroy`?
17. What are Angular pipes, and how do you use them for transforming data in templates?
18. How do you implement routing in Angular with the Angular Router?
19. Can you explain the concept of route guards in Angular and when to use them?
20. What is lazy loading in Angular, and how do you implement it for routing modules?
21. What are Angular Observables, and how are they different from Promises?
22. How do you work with HTTP requests in Angular using `HttpClient`?
23. Can you explain the purpose of `RxJS` in Angular, and how do you manage asynchronous operations?
24. How do you handle error handling in Angular, both in HTTP requests and other asynchronous operations?
25. What is the difference between a `Subject`, `BehaviorSubject`, and `ReplaySubject` in RxJS?
26. How do you bind events to DOM elements in Angular, and how do you handle event propagation?
27. What is Angular's change detection mechanism, and how does it work?
28. Can you explain the difference between `ngOnInit` and the constructor in an Angular component?
29. What is the purpose of `ng-content` in Angular, and how does it relate to content projection?
30. How do you manage component communication in Angular (e.g., parent-child, sibling)?
31. What are Angular services, and how do you define them for use across components?
32. Can you explain Angular's `HttpInterceptor` and its use case for handling HTTP requests globally?
33. How does Angular handle dependency injection, and what is the role of the `providedIn` property in Angular services?
34. What are Angular templates, and how do they work with components to define the UI?
35. How do you create custom pipes in Angular?
36. What is the role of the `@NgModule` decorator, and how do you configure it for an Angular app?
37. How do you handle asynchronous operations in Angular using `async` and `await`?
38. What is the role of `ngForOf` and `ngIf` in Angular templates?
39. How would you optimize the performance of an Angular application (e.g., ChangeDetectionStrategy, trackBy)?
40. What are the different ways to pass data between components in Angular?
41. How do you use Angular's router to create dynamic routes and pass parameters to components?
42. What is the role of `ngModel` in Angular forms, and how do you use it with template-driven forms?
43. Can you explain Angular’s reactive forms and the role of `FormGroup`, `FormControl`, and `FormBuilder`?
44. How would you implement nested forms in Angular, and what is the role of `FormArray`?
45. How do you create an Angular component dynamically?
46. What are Angular animations, and how do you implement them in a component?
47. Can you explain how to work with Angular lifecycle hooks, like `ngAfterViewInit` or `ngOnChanges`?
48. How do you handle session management and user authentication in Angular applications?
49. What is the difference between `ngIf` and `ngShow`/`ngHide` in Angular templates?
50. How do you perform testing in Angular, including unit testing with `Jasmine` and `Karma`?

---

These questions for **Vue.js** and **Angular** will help you strengthen your understanding of both frameworks, their core concepts, and best practices. Being well-prepared for these topics will aid you in interviews and day-to-day development.

### **9. Data Structures and Algorithms (DSA) Popular Questions**

### **1. Arrays**

1. How do you find the missing number in an array containing numbers from 1 to N?
2. Given an array of integers, how do you find the maximum sum of a contiguous subarray (Kadane's Algorithm)?
3. How do you rotate an array by K positions?
4. What is the time complexity of finding the kth largest element in an unsorted array?
5. How do you check if two arrays are equal?
6. How do you merge two sorted arrays into one sorted array?
7. How do you remove duplicates from an array?
8. How do you find the majority element (element that appears more than half the time) in an array?
9. How do you find the equilibrium index of an array (index where the sum of elements on the left is equal to the sum on the right)?
10. How do you perform a binary search on a sorted array?
11. How do you find the first non-repeating element in an array?
12. How do you implement a sliding window technique to find the maximum sum of a subarray of fixed size?
13. How do you find the maximum product subarray in an array of integers?
14. How do you find all the pairs in an array that sum up to a specific target?

### **2. Strings**

1. How do you reverse a string without using built-in functions?
2. How do you check if a string is a palindrome?
3. Given a string, how do you find the longest substring without repeating characters?
4. How do you find the first non-repeating character in a string?
5. How do you check if two strings are anagrams?
6. How do you implement string matching (Naive algorithm)?
7. What is the Boyer-Moore algorithm, and how does it improve string matching?
8. How do you perform pattern matching using the KMP (Knuth-Morris-Pratt) algorithm?
9. How do you convert a string to an integer (implement `atoi`)?
10. How do you implement a substring search in a string (using rolling hash)?
11. How do you find the longest common prefix of an array of strings?
12. How do you check if a string contains all unique characters?
13. How do you remove all spaces from a string?
14. How do you check if a string has balanced parentheses?
15. How do you find the longest palindromic substring in a given string?

### **3. Linked Lists**

1. How do you reverse a singly linked list?
2. How do you detect a cycle in a linked list (Floyd’s Cycle Detection)?
3. How do you find the middle of a linked list?
4. How do you merge two sorted linked lists into one sorted linked list?
5. How do you remove the nth node from the end of a linked list?
6. How do you check if two linked lists intersect at some node?
7. How do you remove duplicates from a sorted linked list?
8. How do you find the intersection point of two linked lists?
9. How do you flatten a multi-level doubly linked list?
10. How do you reverse a portion of a linked list?

### **4. Stacks and Queues**

1. How do you implement a stack using an array or linked list?
2. How do you implement a queue using two stacks?
3. How do you implement a stack that supports push, pop, top, and retrieving the minimum element in constant time?
4. How do you implement a circular queue?
5. How do you check for balanced parentheses using a stack?
6. How do you evaluate a postfix expression using a stack?
7. How do you implement a queue using two stacks?
8. How do you implement a stack using a queue?
9. How do you find the next greater element for each element in a stack?
10. How do you implement a sliding window maximum using a queue?

### **5. Trees**

1. How do you implement a binary tree and its traversals (preorder, inorder, postorder)?
2. How do you check if a binary tree is balanced?
3. How do you find the lowest common ancestor (LCA) of two nodes in a binary tree?
4. How do you find the height of a binary tree?
5. How do you convert a binary search tree (BST) to a sorted doubly linked list?
6. How do you perform a level order traversal of a binary tree (Breadth-First Search)?
7. How do you check if a binary tree is a binary search tree (BST)?
8. How do you perform an inorder traversal of a binary search tree without recursion?
9. How do you print all the leaf nodes of a binary tree?
10. How do you find the diameter of a binary tree (longest path between two leaf nodes)?
11. How do you implement a heap (min-heap or max-heap)?
12. How do you perform a topological sort of a directed acyclic graph (DAG)?
13. How do you find the kth smallest element in a binary search tree?
14. How do you convert a binary tree into a doubly linked list?
15. How do you flatten a binary tree into a linked list in-place?

### **6. Graphs**

1. What is the difference between BFS and DFS, and when do you use each?
2. How do you perform a breadth-first search (BFS) on a graph?
3. How do you perform a depth-first search (DFS) on a graph?
4. How do you detect a cycle in a directed graph?
5. How do you find the shortest path in an unweighted graph (using BFS)?
6. How do you find the shortest path in a weighted graph (using Dijkstra’s algorithm)?
7. How do you find the shortest path in a graph with negative weights (using Bellman-Ford algorithm)?
8. How do you detect a cycle in an undirected graph?
9. What is a topological sort, and how do you perform it on a directed acyclic graph (DAG)?
10. How do you implement a union-find data structure (disjoint set) to detect cycles in a graph?
11. How do you find strongly connected components (SCC) in a directed graph (using Kosaraju’s algorithm)?
12. How do you implement a graph using an adjacency list and adjacency matrix?
13. How do you check if a graph is bipartite?
14. How do you implement a graph traversal using a priority queue (Dijkstra’s algorithm)?
15. How do you find the number of connected components in a graph?

### **7. Dynamic Programming**

1. How do you solve the Fibonacci sequence using dynamic programming?
2. What is the longest common subsequence (LCS) problem, and how do you solve it?
3. How do you solve the 0/1 Knapsack problem using dynamic programming?
4. How do you solve the minimum coin change problem using dynamic programming?
5. How do you solve the subset sum problem using dynamic programming?
6. How do you solve the longest increasing subsequence (LIS) problem using dynamic programming?
7. How do you solve the matrix chain multiplication problem?
8. How do you solve the coin change problem (minimum number of coins) using dynamic programming?
9. How do you solve the rod cutting problem using dynamic programming?
10. How do you solve the house robber problem using dynamic programming?

### **8. Backtracking**

1. How do you solve the N-Queens problem using backtracking?
2. How do you generate all subsets of a given set using backtracking?
3. How do you solve the Sudoku solver problem using backtracking?
4. How do you generate all permutations of a string or array using backtracking?
5. How do you solve the combination sum problem using backtracking?
6. How do you solve the subset sum problem using backtracking?
7. How do you solve the palindrome partitioning problem using backtracking?
8. How do you solve the word search problem on a board using backtracking?
9. How do you solve the rat in a maze problem using backtracking?
10. How do you find all possible combinations of a given set of candidates that sum to a target?

---

### **9. Greedy Algorithms**

1. How do you solve the activity selection problem using a greedy approach?
2. How do you find the minimum number of coins for a given amount using a greedy algorithm?
3. How do you solve the Huffman coding problem using a greedy approach?
4. How do you find the minimum spanning tree of a graph (Prim’s or Kruskal’s algorithm)?
5. How do you find the fractional knapsack solution using a greedy approach?
6. How do you solve the job sequencing problem using a greedy algorithm?
7. How do you schedule tasks using a greedy approach to minimize the completion time?
8. How do you find the maximum sum subarray with at least one element using a greedy approach?
9. How do you find the maximum number of intervals that can be attended using a greedy approach?
10. How do you solve the interval scheduling problem using a greedy approach?

---

These questions cover various data structures and algorithmic techniques commonly used in technical interviews. It's important to understand both the implementation and the underlying theory behind each concept.

Your list of topics and questions covers a broad range of fundamental and advanced concepts. However, there are a few more areas you might want to explore or deepen your understanding of, based on your experience and the technologies you're working with.

### 1. **Advanced JavaScript (ES6 and beyond)**

As a frontend developer, knowing advanced JavaScript is crucial. Some topics to focus on are:

- **Closures and Lexical Scope** – Deep dive into how closures work and how lexical scope affects variable access.
- **Event Loop and Asynchronous Programming** – Understanding the event loop, promises, async/await, and how JavaScript handles concurrency.
- **Design Patterns in JavaScript** – Singleton, Observer, Module, Factory patterns, etc.
- **JavaScript Memory Management** – How garbage collection works in JavaScript, and how to optimize memory usage.
- **Deep vs Shallow Copy** – How to clone objects and arrays, and the difference between deep and shallow copies.

### 2. **Browser Internals and Optimization**

For frontend developers, knowledge of how the browser works is critical:

- **Rendering Process** – How the browser parses HTML, CSS, and JavaScript and paints content on the screen.
- **Critical Rendering Path** – How to optimize the loading time of a web page.
- **Reflow and Repaint** – What triggers reflow and repaint, and how to minimize them for performance.
- **Lazy Loading and Code Splitting** – Techniques to improve the performance of your application.
- **Web Performance APIs** – Understanding tools like `Performance`, `Navigation Timing`, and `Resource Timing` for performance monitoring.

### 3. **Web Accessibility (a11y)**

This is a critical but sometimes overlooked aspect of frontend development:

- **WCAG Guidelines** – Understanding the Web Content Accessibility Guidelines and how to implement them.
- **Keyboard Navigation** – Ensuring your site can be navigated without a mouse.
- **Screen Readers and ARIA** – How to use ARIA (Accessible Rich Internet Applications) attributes to improve accessibility.

### 4. **CSS (Advanced Concepts)**

You mentioned CSS, but you might want to go a bit deeper into some advanced topics:

- **CSS Grid and Flexbox** – Mastering these modern layout techniques.
- **CSS Variables and Custom Properties** – How to leverage them for dynamic styling and maintaining consistent design systems.
- **CSS Animations and Transitions** – Creating smooth animations and transitions that are performant.
- **CSS-in-JS** – Techniques like styled-components or emotion for React to style components in JavaScript.
- **Responsive Web Design** – Advanced media queries, fluid grids, and adaptive design techniques.

### 5. **Testing and Test Automation**

As a professional developer, testing is essential to ensuring your code works as expected:

- **Unit Testing** – Writing unit tests for frontend code using frameworks like Jest or Mocha.
- **Integration Testing** – Writing tests that validate how different components interact with each other.
- **End-to-End (E2E) Testing** – Tools like Cypress or Selenium to test the entire application flow.
- **Mocking and Stubbing** – How to mock dependencies for unit tests to isolate the functionality being tested.

### 6. **API Design and GraphQL**

Since you're working with APIs, you might want to deepen your understanding of:

- **RESTful APIs** – Best practices for designing clean and scalable REST APIs.
- **GraphQL** – How to use GraphQL to optimize data fetching and reduce over-fetching.
- **API Versioning and Authentication** – How to handle versioning in APIs and how to implement OAuth or JWT for authentication.

### 7. **State Management (Redux, Redux-Saga, Redux-Toolkit)**

You're familiar with Redux and Redux-Saga, but understanding the following can enhance your knowledge:

- **Redux Toolkit** – Modern Redux approach that simplifies your Redux logic (e.g., `createSlice`, `createAsyncThunk`).
- **Context API vs Redux** – When to use React's Context API vs Redux for state management.
- **Optimizing Redux Performance** – Techniques to avoid unnecessary renders and improve performance in large apps.

### 8. **Security Best Practices**

Front-end developers should also be familiar with common security risks:

- **Cross-Site Scripting (XSS)** – Understanding the threat and how to avoid it.
- **Cross-Site Request Forgery (CSRF)** – Mitigating CSRF attacks in your applications.
- **Content Security Policy (CSP)** – Using CSP to secure your application from certain attacks.
- **SameSite Cookies** – Ensuring proper cookie security settings.

### 9. **Code Quality and Clean Code Principles**

- **Code Refactoring** – How to identify and refactor bad code to improve maintainability.
- **SOLID Principles** – Although often associated with backend development, SOLID principles are useful for writing maintainable, scalable frontend code.
- **Code Reviews** – Best practices for conducting and receiving code reviews.
- **Linting and Formatting** – Tools like ESLint and Prettier to maintain consistent code style across your team.

### 10. **Version Control (Git)**

You're probably familiar with Git basics, but it's worth deepening your understanding of:

- **Git Rebase vs Merge** – The pros and cons of each method and when to use them.
- **Git Hooks** – Using pre-commit hooks to enforce code quality standards.
- **Git Workflow Strategies** – Git flow, trunk-based development, or feature branching.

### 11. **CI/CD Pipelines**

If you're aiming for mid/senior roles, having experience with CI/CD (Continuous Integration/Continuous Deployment) is a great advantage:

- **Setting Up a CI/CD Pipeline** – Using GitHub Actions, Jenkins, or Travis to automate your builds, tests, and deployments.
- **Automated Testing in CI** – Ensuring tests are run in the CI pipeline before deploying to production.
- **Deployment Strategies** – Blue-Green deployments, Canary deployments, etc.

### 12. **Cloud and Deployment**

Understanding how to deploy and manage applications in the cloud can be valuable:

- **Cloud Platforms** – Knowledge of AWS, Google Cloud, or Azure.
- **Containerization** – Using Docker for containerizing applications.
- **CI/CD on Cloud** – Integrating CI/CD pipelines with cloud platforms.
- **Serverless Architectures** – Using serverless functions (AWS Lambda, Azure Functions) for scaling backend operations.

---

### Conclusion

Overall, you're covering most of the critical areas, but diving deeper into performance optimization, security, accessibility, testing, and state management will further refine your skills. This will help you stay competitive and handle more complex tasks in your development career.

You're absolutely right—those are **critical** areas for a frontend developer with 3 years of experience. Modern frontend interviews (especially for mid-level roles) **do include deep questions** about:

- **How the web works**
- **Browser internals**
- **Build tools like Webpack, Babel, etc.**
- **Performance, rendering, security, and deployment**

Let me now list **all the essential topics and at least 50 questions** from this **"Web Fundamentals, Browser, and Tooling"** category that **you must prepare for**.

---

## ✅ **Web, Browser, and Frontend Tooling — 50+ Must-Know Questions**

### 🌐 **1. Web Fundamentals & Network**

1. What happens when you type a URL in the browser and press Enter?
2. What is DNS, and how does DNS resolution work?
3. What is HTTP vs HTTPS?
4. What are the main HTTP methods? (GET, POST, PUT, DELETE, PATCH)
5. What are the main HTTP status codes you should know? (200, 201, 301, 302, 400, 401, 403, 404, 500, etc.)
6. What is the difference between 301 and 302 redirects?
7. What is a REST API?
8. What is the difference between REST and GraphQL?
9. What are headers in HTTP? Give examples.
10. What is CORS? Why do we need it?
11. How do you handle CORS errors in frontend applications?
12. What is the difference between HTTP 1.1, HTTP/2, and HTTP/3?

### 🌐 **2. Browser Internals**

1. How does the browser render a web page? (Critical Rendering Path)
2. What is DOM, CSSOM, and how are they different?
3. What is the difference between synchronous and asynchronous scripts?
4. What is reflow and repaint in the browser?
5. What causes layout thrashing?
6. How does the event loop work in the browser?
7. What are microtasks vs macrotasks?
8. How do browser caching mechanisms work?
9. What are service workers and how do they work?
10. What is the purpose of the `preload`, `prefetch`, and `dns-prefetch` tags?

### 🧩 **3. Build Tools: Webpack, Babel, Vite, etc.**

1. What is Webpack? Why do we use it?
2. What is the role of a bundler?
3. What is Babel? Why is it used?
4. What are loaders and plugins in Webpack?
5. What is a transpiler vs compiler?
6. What is tree shaking in Webpack?
7. What is code splitting, and how does Webpack support it?
8. What is Hot Module Replacement (HMR)?
9. What is the difference between Webpack and Vite?
10. What is the difference between development and production builds?
11. What is source mapping and why is it important?

### 🚀 **4. Performance Optimization**

1. How do you optimize a React app for performance?
2. What tools do you use to analyze performance (e.g., Lighthouse, Chrome DevTools)?
3. What is lazy loading?
4. What is the difference between `defer` and `async` in script tags?
5. What is Time to First Byte (TTFB)?
6. What is Largest Contentful Paint (LCP), and how do you optimize it?
7. What is a memory leak in frontend and how can you detect it?
8. What is debounce vs throttle? When to use which?

### 🔐 **5. Frontend Security**

1. What is XSS (Cross-Site Scripting)? How to prevent it?
2. What is CSRF (Cross-Site Request Forgery)?
3. How does HTTPS help with security?
4. What are some common security headers (e.g., Content-Security-Policy)?
5. What is same-origin policy?

### ☁️ **6. Deployment & Hosting**

1. How do you deploy a React application?
2. What is the difference between client-side and server-side rendering?
3. What is static vs dynamic hosting?
4. What is a CDN, and how does it help performance?

---

### 🧠 Bonus Interview-Style Questions

1. How do SPAs (Single Page Applications) work?
2. How does routing work in SPAs?
3. How does lazy loading work in Webpack or React?
4. What is hydration in React?
5. Why is SSR (Server Side Rendering) used? What are its pros and cons?
6. How does browser caching differ from service worker caching?

---

Would you like me to compile all of these into a **Notion-style Q&A format** like we did earlier for DSA and other sections?

Great — let’s start with **Frontend Testing**, as it’s a **commonly overlooked** but increasingly important area for 3+ year frontend developers, especially when applying to product companies or teams with good engineering practices.

---

## ✅ **Frontend Testing: 40+ Must-Know Interview Questions**

### 🧪 **1. Testing Basics**

1. What is the difference between unit, integration, and end-to-end testing?
2. Why is testing important in frontend development?
3. What is a test pyramid?
4. What is TDD (Test Driven Development)?
5. What’s the difference between manual testing and automated testing?

---

### 🧰 **2. Tools & Frameworks**

1. What testing libraries have you used in React projects?
2. What is Jest? What makes it popular for frontend testing?
3. What is React Testing Library? How is it different from Enzyme?
4. What is Cypress? How is it different from Jest?
5. When would you use React Testing Library vs Cypress?

---

### 🧠 **3. React Component Testing**

1. How do you test a React component with props?
2. How do you test user interactions like click, input, or hover?
3. How do you test conditional rendering in React?
4. How do you test if a component renders a list of items?
5. How do you test a component using `useState` or `useEffect`?
6. How do you mock `useNavigate` or `useLocation` from React Router?

---

### 🌐 **4. API & Async Testing**

1. How do you test components that make API calls?
2. How do you mock fetch or Axios requests in tests?
3. How do you wait for an element to appear after async loading?
4. What is `waitFor` in React Testing Library?
5. How do you test error states in API responses?

---

### 🔁 **5. Redux / Context Testing**

1. How do you test a component that uses Redux state?
2. How do you mock Redux store in tests?
3. How do you test actions or reducers in Redux?
4. How do you test a component using React Context?

---

### 🎯 **6. Best Practices**

1. What is the difference between testing implementation vs behavior?
2. Why is testing DOM output better than testing internal methods?
3. How do you write testable React code?
4. What makes a test flaky? How do you avoid it?
5. What is code coverage, and is 100% coverage necessary?

---

### ⚙️ **7. Configuration & Setup**

1. What is a test environment?
2. How do you configure Jest in a React project?
3. How do you run only specific tests?
4. What is the purpose of `jest.mock()`?
5. How do you mock a module or component?

---

### 👨‍💻 **8. Real-Life Scenarios**

1. How do you test file uploads or form submissions?
2. How do you test component visibility (e.g., modal open/close)?
3. How do you test components that use timers or `setTimeout`?
4. How do you test keyboard navigation or focus state?
5. How do you test components using portals (e.g., modals, toasts)?

---

### 📊 **9. Tools Beyond Jest**

1. What is Playwright? How is it different from Cypress?
2. What are Storybook tests or visual regression tests?
3. Have you used tools like `axe-core` for accessibility testing?

---

## 👉 Tip:

For your resume experience (VCB, UI Kits, Chat Dashboards), **mocking APIs**, **testing Redux-connected components**, and **user interaction testing (toggle, modal, etc.)** should be your **main preparation focus**.

---

Would you like me to continue with:

- **Frontend System Design (UI Architecture)**
- **Accessibility (a11y)**
- **CI/CD, Deployment, GitHub Actions**
    
    Let me know which one you'd like next.
    

Great — let’s now continue with the next important section:

---

## 🧱 **Frontend System Design (UI Architecture)**

Here are **50+ questions** you should know as a frontend dev with 3 years of experience, especially when applying to companies that care about **code structure, performance, scalability**, and **team collaboration**.

---

### 🧠 1. **Component Design**

1. What is a presentational (dumb) component vs a container (smart) component?
2. How do you decide how small or large a component should be?
3. How do you ensure components are reusable?
4. How do you manage props drilling in deeply nested components?
5. When do you use Context API vs Redux for passing data?

---

### 🧱 2. **Application Architecture**

1. How do you structure folders in a large-scale React project?
2. What is a feature-based folder structure?
3. How do you structure a design system / UI Kit?
4. What’s the best way to manage shared constants and utilities?
5. How do you separate business logic from UI logic?

---

### 🔁 3. **State Management**

1. How do you decide between Redux, Context, or component state?
2. What are the pros and cons of Redux-Saga?
3. How do you handle loading and error states globally?
4. How do you persist state across sessions?
5. What are derived states, and how should they be handled?

---

### 🧩 4. **Component Communication**

1. How do sibling components communicate in React?
2. What are the problems with prop drilling, and how do you solve them?
3. What is a pub-sub pattern, and have you used one?
4. How do you handle global notifications or toasts across the app?
5. How do you decouple components from each other?

---

### ⚙️ 5. **Routing & Navigation**

1. How do you structure routes in a large app?
2. How do you handle nested routes?
3. How do you protect private routes?
4. How do you manage route-based code splitting?
5. How do you handle redirections based on auth?

---

### 🧪 6. **Error Handling**

1. How do you handle API errors at scale?
2. How do you create a global error boundary in React?
3. How do you show error messages at component and global levels?
4. What is error tracking and logging? Have you used Sentry or similar tools?
5. What is fallback UI?

---

### ⚡ 7. **Performance Optimization**

1. What are the most common causes of React performance issues?
2. What is React.memo and when should you use it?
3. What is useMemo and useCallback? When do they help?
4. How do you identify unnecessary re-renders?
5. How do you lazy load components in React?

---

### 🌐 8. **Network & Data**

1. How do you manage API calls across multiple components?
2. What is the role of caching in frontend apps?
3. How do you avoid duplicate API calls?
4. How do you debounce user inputs (e.g., search bar)?
5. How do you retry failed requests or add exponential backoff?

---

### 🧳 9. **Scalability**

1. How do you prepare a frontend app for a large number of users?
2. What’s your strategy for building modular and extensible code?
3. What are micro-frontends?
4. Have you worked on multi-tenant or white-label UI kits?
5. How do you handle environment-based configurations (dev, staging, prod)?

---

### 🚀 10. **Deployment and Maintainability**

1. How do you handle versioning in component libraries?
2. How do you ensure code consistency in a team of 10+ developers?
3. How do you document your components for other developers?
4. Have you contributed to or maintained a shared design system?
5. How do you track and manage tech debt in frontend projects?

---

## ✅ Example Scenario Questions:

- "If you had to rebuild the CometChat Dashboard from scratch, how would you architect it?"
- "How would you design a notification system that works across all pages?"
- "How would you ensure your UI kit is themeable and customizable for other teams?"

---

Next options I can cover:

- **Accessibility (a11y)**
- **CI/CD and GitHub Actions**
- **Monorepo and Shared UI Libraries**
- **Testing with Cypress / Storybook**

Which one should I take up next?